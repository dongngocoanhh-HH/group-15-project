// frontend/src/pages/Profile.jsx
import React, { useEffect, useState, useRef } from 'react';
import {
  Avatar,
  Box,
  Button,
  Container,
  TextField,
  Typography,
  Alert,
  CircularProgress,
  Paper,
  Divider,
} from '@mui/material';
import { getProfile, updateProfile, uploadAvatar } from '../services/userService';
import { logout, getAccessToken, getUser } from '../services/authService';

export default function Profile({ onLogout }) {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [msg, setMsg] = useState({ type: 'info', text: '' });

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [avatar, setAvatar] = useState('');
  const [avatarFile, setAvatarFile] = useState(null);

  const inputRef = useRef(null);

  useEffect(() => {
    // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
    const token = getAccessToken();
    if (!token) {
      window.location.href = '/login';
      return;
    }

    // Load th√¥ng tin user t·ª´ localStorage ho·∫∑c API
    const cachedUser = getUser();
    if (cachedUser) {
      setName(cachedUser.name || '');
      setEmail(cachedUser.email || '');
      setAvatar(cachedUser.avatar || '');
    }

    let ignore = false;
    (async () => {
      setLoading(true);
      const res = await getProfile(token);
      if (!ignore) {
        if (res.success) {
          const u = res.user;
          setName(u.name || '');
          setEmail(u.email || '');
          setAvatar(u.avatar || '');
          setMsg({ type: 'success', text: '' });
        } else {
          setMsg({ type: 'error', text: res.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin' });
        }
        setLoading(false);
      }
    })();
    return () => { ignore = true; };
  }, []);

  const handleUpdate = async (e) => {
    e.preventDefault();
    setSaving(true);
    setMsg({ type: 'info', text: '' });
    const token = getAccessToken();
    const res = await updateProfile({ name, avatar }, token);
    setSaving(false);
    if (res.success) {
      setMsg({ type: 'success', text: res.message || 'C·∫≠p nh·∫≠t th√†nh c√¥ng' });
    } else {
      setMsg({ type: 'error', text: res.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i' });
    }
  };

  const handleLogout = async () => {
    if (onLogout) {
      // D√πng logout handler t·ª´ App.js ƒë·ªÉ ƒë·ªìng b·ªô state
      onLogout();
    } else {
      // Fallback n·∫øu kh√¥ng c√≥ prop
      await logout();
      window.location.href = '/login';
    }
  };

  const onPickFile = () => inputRef.current?.click();

  const onFileChange = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setAvatarFile(file);
    setMsg({ type: 'info', text: '' });

    const token = getAccessToken();
    // g·ªçi API uploadAvatar (ƒë√£ export t·ª´ userService)
    const res = await uploadAvatar(file, token);
    if (res.success && res.url) {
      setAvatar(res.url); // g√°n URL m·ªõi v√†o form
      setMsg({ type: 'success', text: 'Upload th√†nh c√¥ng' });
    } else {
      setMsg({ type: 'error', text: res.message || 'L·ªói upload ·∫£nh' });
    }
  };

  if (loading) {
    return (
      <Container maxWidth="sm" sx={{ py: 6, textAlign: 'center' }}>
        <CircularProgress />
      </Container>
    );
  }

  return (
    <Container maxWidth="sm" sx={{ py: 6 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5" fontWeight={700}>
          Th√¥ng tin c√° nh√¢n
        </Typography>
        <Button variant="outlined" color="error" onClick={handleLogout}>
          ƒêƒÉng xu·∫•t
        </Button>
      </Box>

      {msg.text ? <Alert severity={msg.type} sx={{ mb: 2 }}>{msg.text}</Alert> : null}

      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
        <Avatar src={avatar || undefined} sx={{ width: 80, height: 80 }}>
          {!avatar ? (name?.[0]?.toUpperCase() || 'A') : null}
        </Avatar>

        <input
          type="file"
          accept="image/*"
          ref={inputRef}
          onChange={onFileChange}
          style={{ display: 'none' }}
        />
        <Button variant="outlined" onClick={onPickFile}>
          CH·ªåN ·∫¢NH‚Ä¶
        </Button>
      </Box>

      <Box component="form" onSubmit={handleUpdate}>
        <TextField
          label="T√™n"
          fullWidth
          sx={{ mb: 2 }}
          value={name}
          onChange={(e) => setName(e.target.value)}
        />

        <TextField
          label="Email"
          fullWidth
          sx={{ mb: 2 }}
          value={email}
          disabled
        />

        <TextField
          label="Avatar URL"
          fullWidth
          sx={{ mb: 2 }}
          value={avatar}
          onChange={(e) => setAvatar(e.target.value)}
        />

        <Button
          type="submit"
          variant="contained"
          disabled={saving}
        >
          {saving ? 'ƒêang l∆∞u‚Ä¶' : 'C·∫¨P NH·∫¨T'}
        </Button>
      </Box>

      <Divider sx={{ my: 4 }} />

      <Paper elevation={2} sx={{ p: 3, bgcolor: '#f5f5f5' }}>
        <Typography variant="h6" gutterBottom>
          üîê Refresh Token Demo
        </Typography>
        <Typography variant="body2" color="text.secondary" paragraph>
          Access Token h·∫øt h·∫°n sau 15 ph√∫t. Khi b·∫°n g·ªçi API sau khi token h·∫øt h·∫°n, 
          h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông l√†m m·ªõi token b·∫±ng Refresh Token v√† th·ª±c hi·ªán l·∫°i request.
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Refresh Token h·∫øt h·∫°n sau 7 ng√†y. N·∫øu Refresh Token h·∫øt h·∫°n, b·∫°n s·∫Ω ƒë∆∞·ª£c 
          chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p.
        </Typography>
      </Paper>
    </Container>
  );
}
